In this project we wrote a basic bootloader. 

The first part of the project required us to write bootblock.s, which is loaded by the BIOS from the first sector of memory and set to execute. The code we wrote moved itself to two sectors below 0xA0000 so as to be safely away from the top of its own stack. It set its stack at 0x9FFFF. It writes the kernel from the second segment of memory to 0x1000, resets the stack allowing the kernel to overwrite the bootloader, and then transfers control to the kernel.

The second part of the project required us to write the code that actually creates the image file, given two executables representing the bootblock and kernel, respectively. We parsed these ELF files and wrote their code segments into the image file. We padded appropriately, so that there was no unwanted code at the end of any segment that may not be related to the program in the rest of the segment. If we did not pad, this could lead to situations where a sector is read in hopes of finding one program, but then arbitrary code is executed since the beginning of another program was read as well. In the bootblock portion of the image file, we made sure that the last two bytes were 0x55 and 0xAA, so that the BIOS would know that the device holding this image was bootable.